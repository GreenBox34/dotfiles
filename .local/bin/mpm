#!/bin/sh
#
# Copyright (C) 2025 Julian Dittert
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Description: Tiny shell script heavily inspired by TPM and pass. Just like TPM and pass,
# it uses gpg(1) to securely store your passwords.

###
# BEGIN Variables
###

GPG_OPTS="--quiet --yes --batch"
STORE_DIR="${PASSWORD_STORE_DIR:-${HOME}/.password-store}"

if test -r "${STORE_DIR}/.gpg-id" && test -z "${PASSWORD_STORE_KEY}"; then
  read -r PASSWORD_STORE_KEY < "${STORE_DIR}/.gpg-id"
fi

usage=$(cat <<_EOF
mpm command entry
Commands:
    show   -- show entry password
    insert -- insert a new entry to ${STORE_DIR}
    edit   -- edit an entry
    view   -- view ${STORE_DIR} as a tree
_EOF
)

###
# BEGIN HELPER FUNCTIONS
###

die ()
{
  printf '%s\n' "${@}" 1>&2
  exit 1
}

gpg ()
{
  if test -n "${PASSWORD_STORE_KEY}"; then
    gpg2 $GPG_OPTS --recipient "${PASSWORD_STORE_KEY}" "${@}"
  else
    gpg2 $GPG_OPTS --default-recipient-self "${@}"
  fi
}

read_password ()
{
  if test -t 0; then
    printf '%s' "${1}"
    stty -echo
  fi

  IFS= read -r "${2}"
  test -t 0 && stty echo
}

###
# BEGIN commands
###

cmd_show ()
{
  entry_name="${1}"
  entry_path="${STORE_DIR}/${1}"

  if test -z "${entry_name}"; then
    die "No entry specified"
  fi

  if ! test -e "${entry_path}"; then
    die "Not a valid entry"
  fi

  gpg --decrypt "${entry_path}"
}

cmd_insert ()
{
  entry_name="${1}"
  entry_path="${STORE_DIR}/${1}"

  if test -z "${entry_name}"; then
    die "No entry specified"
  fi

  if test -e "${entry_path}"; then
    die "Entry already exists"
  fi

  password=""
  read_password "Password for '${entry_name}':" password
  if test -t 0; then
    printf '\n'
  fi

  if test -z "${password}"; then
    die "no password specified"
  fi

  mkdir -p "${entry_path%/*}"
  printf "%s\n" "${password}" | gpg --encrypt --output "${entry_path}"
}

cmd_edit ()
{
  entry_name="${1}"
  entry_path="${STORE_DIR}/${1}"

  if ! test -f "${entry_path}"; then
    die "${entry_name} does not exist" 
  fi

  if ! test -d "/dev/shm"; then
    die "Failed to access /dev/shm" 
  fi

  tempfile="/dev/shm/mpm/${entry_name}.txt"
  tempdir=$(dirname "${tempfile}")
  mkdir -p "${tempdir}"
  trap 'rm -rf ${tempdir}' EXIT

  gpg --decrypt "${entry_path}" > "${tempfile}" || die "Error decrypting ${entry_name}"

  ${EDITOR:-vi} "${tempfile}"

  if test -f "${tempfile}"; then
    rm "${entry_path}"
    gpg --output "${entry_path}" --encrypt "${tempfile}" || die "Error encrypting ${tempfile}"
  else
    die "Nothing Done"
  fi
}

cmd_view ()
{
  tree "${STORE_DIR}"
  exit 0
}

###
# BEGIN parse input
###

if test -z "${1}" || test $# -gt 2; then
  printf "%s\n" "${usage}"
  exit 0
fi

case "${1}" in
  "show")
    cmd_show "${2}"
    ;;
  "insert")
    cmd_insert "${2}"
    ;;
  "edit")
    cmd_edit "${2}"
    ;;
  "view")
    cmd_view
    ;;
  *)  
    printf "%s\n" "${usage}"
    ;;
esac
exit 0

# vim: et sw=2
